////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end) {
  let results = []
if(start < end){
for (let i = start; i < end; i ++){
  results.push(i)
}else if(end < start){
for (let i = start; i > end; i--){
  results.push(i)
}
}
return results
}
}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum() {

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let revArr = [];
  for(let i = array.length - 1; i >= 0; i--){
revArr.push(array[i])
  }
return revArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace() {

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
let rest = null;
//reverse for loop
for(let i = array.length - 1; i >= 0; i--){
  rest = { value: array[i], rest: rest}; //reassigning rest to an object
}
return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []) {
//base
if(list.rest === null){
  //be sure to push one last time
  array.push(list.value)
  return array;
}
//recursion
 //how to update array
 array.push(list.value);
 return listToArray(list.rest, array)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  //determine if x and y are not objects
if(typeof x !== 'object' && typeof y !== 'object'){
  return x === y
}
//determine if either x or y are not objects
if(typeof x !== 'object' || typeof y !== 'object'){
  return false;
}
//create arrays of each objects keys
let xKeys = Object.keys(x)
let yKeys = Object.keys(y)

//quick check: do keys lengths match?
if (xKeys.length !== yKeys.length){
  return false;
}

//iterate to determine if array keys match and if values at keys match
for(let i = 0; i < xKeys.length; i++){
  if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){//determine if current key is NOT included in yKeys
    return false;
  } 
}            
return true;
}
////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};